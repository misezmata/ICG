Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a;

Line 2: statement : var_declaration

int a;


Line 2: statements : statement

int a;


Line 3: variable : ID

a

Line 3: factor : CONST_INT

10

Line 3: unary_expression : factor

10

Line 3: term : unary_expression

10

Line 3: simple_expression : term

10

Line 3: rel_expression : simple_expression

10

Line 3: logic_expression : rel_expression

10

Line 3: expression : variable ASSIGNOP logic_expression

a=10

Line 3: expression_statement : expression SEMICOLON

a=10;

Line 3: statement : expression_statement

a=10;


Line 3: statements : statements statement

int a;
a=10;


Line 5: type_specifier : INT

int

Line 5: declaration_list : ID

a

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

int a;

Line 5: statement : var_declaration

int a;


Line 5: statements : statement

int a;


Line 6: variable : ID

a

Line 6: factor : CONST_INT

0

Line 6: unary_expression : factor

0

Line 6: term : unary_expression

0

Line 6: simple_expression : term

0

Line 6: rel_expression : simple_expression

0

Line 6: logic_expression : rel_expression

0

Line 6: expression : variable ASSIGNOP logic_expression

a=0

Line 6: expression_statement : expression SEMICOLON

a=0;

Line 6: statement : expression_statement

a=0;


Line 6: statements : statements statement

int a;
a=0;


Line 7: compound_statement : LCURL statements RCURL

{
int a;
a=0;
}




ScopeTable # 1.1.1
 6 --> < a , ID > 



ScopeTable # 1.1
 6 --> < a , ID > 



ScopeTable # 1
 6 --> < main , ID > 


Line 7: statement : compound_statement

{
int a;
a=0;
}


Line 7: statements : statements statement

int a;
a=10;
{
int a;
a=0;
}


Line 8: variable : ID

a

Line 8: factor : variable

a

Line 8: unary_expression : factor

a

Line 8: term : unary_expression

a

Line 8: simple_expression : term

a

Line 8: rel_expression : simple_expression

a

Line 8: logic_expression : rel_expression

a

Line 8: expression : logic_expression

a

Line 8: statement : RETURN expression SEMICOLON

return a;


Line 8: statements : statements statement

int a;
a=10;
{
int a;
a=0;
}
return a;


Line 9: compound_statement : LCURL statements RCURL

{
int a;
a=10;
{
int a;
a=0;
}
return a;
}




ScopeTable # 1.1
 6 --> < a , ID > 



ScopeTable # 1
 6 --> < main , ID > 


Line 9: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a;
a=10;
{
int a;
a=0;
}
return a;
}


Line 9: unit : func_definition

int main(){
int a;
a=10;
{
int a;
a=0;
}
return a;
}



Line 9: program : unit

int main(){
int a;
a=10;
{
int a;
a=0;
}
return a;
}



Line 9: start : program



ScopeTable # 1
 6 --> < main , ID > 


Total lines: 9
Total errors: 0

