Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: declaration_list : declaration_list COMMA ID

a,b

Line 2: declaration_list : declaration_list COMMA ID

a,b,c

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c;

Line 2: statement : var_declaration

int a,b,c;


Line 2: statements : statement

int a,b,c;


Line 3: variable : ID

a

Line 3: factor : CONST_INT

2

Line 3: unary_expression : factor

2

Line 3: term : unary_expression

2

Line 3: simple_expression : term

2

Line 3: rel_expression : simple_expression

2

Line 3: logic_expression : rel_expression

2

Line 3: expression : variable ASSIGNOP logic_expression

a=2

Line 3: expression_statement : expression SEMICOLON

a=2;

Line 3: statement : expression_statement

a=2;


Line 3: statements : statements statement

int a,b,c;
a=2;


Line 4: variable : ID

b

Line 4: factor : CONST_INT

2

Line 4: unary_expression : factor

2

Line 4: term : unary_expression

2

Line 4: simple_expression : term

2

Line 4: rel_expression : simple_expression

2

Line 4: logic_expression : rel_expression

2

Line 4: expression : variable ASSIGNOP logic_expression

b=2

Line 4: expression_statement : expression SEMICOLON

b=2;

Line 4: variable : ID

b

Line 4: factor : variable

b

Line 4: unary_expression : factor

b

Line 4: term : unary_expression

b

Line 4: simple_expression : term

b

Line 4: factor : CONST_INT

4

Line 4: unary_expression : factor

4

Line 4: term : unary_expression

4

Line 4: simple_expression : term

4

Line 4: rel_expression : simple_expression RELOP simple_expression

b<4

Line 4: logic_expression : rel_expression

b<4

Line 4: expression : logic_expression

b<4

Line 4: expression_statement : expression SEMICOLON

b<4;

Line 4: variable : ID

b

Line 4: factor : variable INCOP

b++

Line 4: unary_expression : factor

b++

Line 4: term : unary_expression

b++

Line 4: simple_expression : term

b++

Line 4: rel_expression : simple_expression

b++

Line 4: logic_expression : rel_expression

b++

Line 4: expression : logic_expression

b++

Line 5: variable : ID

c

Line 5: factor : CONST_INT

1

Line 5: unary_expression : factor

1

Line 5: term : unary_expression

1

Line 5: simple_expression : term

1

Line 5: rel_expression : simple_expression

1

Line 5: logic_expression : rel_expression

1

Line 5: expression : variable ASSIGNOP logic_expression

c=1

Line 5: expression_statement : expression SEMICOLON

c=1;

Line 5: variable : ID

c

Line 5: factor : variable

c

Line 5: unary_expression : factor

c

Line 5: term : unary_expression

c

Line 5: simple_expression : term

c

Line 5: factor : CONST_INT

5

Line 5: unary_expression : factor

5

Line 5: term : unary_expression

5

Line 5: simple_expression : term

5

Line 5: rel_expression : simple_expression RELOP simple_expression

c<=5

Line 5: logic_expression : rel_expression

c<=5

Line 5: expression : logic_expression

c<=5

Line 5: expression_statement : expression SEMICOLON

c<=5;

Line 5: variable : ID

c

Line 5: factor : variable INCOP

c++

Line 5: unary_expression : factor

c++

Line 5: term : unary_expression

c++

Line 5: simple_expression : term

c++

Line 5: rel_expression : simple_expression

c++

Line 5: logic_expression : rel_expression

c++

Line 5: expression : logic_expression

c++

Line 6: variable : ID

a

Line 6: variable : ID

b

Line 6: factor : variable

b

Line 6: unary_expression : factor

b

Line 6: term : unary_expression

b

Line 6: variable : ID

c

Line 6: factor : variable

c

Line 6: unary_expression : factor

c

Line 6: term : term MULOP unary_expression

b*c

Line 6: simple_expression : term

b*c

Line 6: rel_expression : simple_expression

b*c

Line 6: logic_expression : rel_expression

b*c

Line 6: expression : variable ASSIGNOP logic_expression

a=b*c

Line 6: expression_statement : expression SEMICOLON

a=b*c;

Line 6: statement : expression_statement

a=b*c;


Line 6: statements : statement

a=b*c;


Line 7: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);


Line 7: statements : statements statement

a=b*c;
printf(a);


Line 8: compound_statement : LCURL statements RCURL

{
a=b*c;
printf(a);
}




ScopeTable # 1.1.1.1



ScopeTable # 1.1.1



ScopeTable # 1.1
 0 --> < b , ID > 
 1 --> < c , ID > 
 6 --> < a , ID > 



ScopeTable # 1
 6 --> < main , ID > 


Line 8: statement : compound_statement

{
a=b*c;
printf(a);
}


Line 8: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(c=1;c<=5;c++){
a=b*c;
printf(a);
}


Line 8: statements : statement

for(c=1;c<=5;c++){
a=b*c;
printf(a);
}


Line 9: compound_statement : LCURL statements RCURL

{
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}




ScopeTable # 1.1.1



ScopeTable # 1.1
 0 --> < b , ID > 
 1 --> < c , ID > 
 6 --> < a , ID > 



ScopeTable # 1
 6 --> < main , ID > 


Line 9: statement : compound_statement

{
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}


Line 9: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(b=2;b<4;b++){
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}


Line 9: statements : statements statement

int a,b,c;
a=2;
for(b=2;b<4;b++){
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}


Line 10: compound_statement : LCURL statements RCURL

{
int a,b,c;
a=2;
for(b=2;b<4;b++){
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}
}




ScopeTable # 1.1
 0 --> < b , ID > 
 1 --> < c , ID > 
 6 --> < a , ID > 



ScopeTable # 1
 6 --> < main , ID > 


Line 10: func_definition : type_specifier ID LPAREN RPAREN compound_statement

Error at line 10: Type mismatch, function is not void

int main(){
int a,b,c;
a=2;
for(b=2;b<4;b++){
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}
}


Line 10: unit : func_definition

int main(){
int a,b,c;
a=2;
for(b=2;b<4;b++){
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}
}



Line 10: program : unit

int main(){
int a,b,c;
a=2;
for(b=2;b<4;b++){
for(c=1;c<=5;c++){
a=b*c;
printf(a);
}
}
}



Line 10: start : program



ScopeTable # 1
 6 --> < main , ID > 


Total lines: 10
Total errors: 1

